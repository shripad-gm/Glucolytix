import express from 'express';
import fetch from 'node-fetch';
import User from '../models/user.model.js';
import DiabetesData from '../models/diabetes.model.js';
import { protectRoute } from '../middleware/protectedRoute.js';
import dotenv from 'dotenv';

dotenv.config();

const router = express.Router();

router.get('/getRecommendations', protectRoute, async (req, res) => {
    const userId = req.user._id;

    try {
        const user = await User.findById(userId);
        const diabetesData = await DiabetesData.findOne({ userId });
        if (!user || !diabetesData) {
            return res.status(404).json({ error: "User or diabetes data not found" });
        }

        const bmi = user.weight / ((user.height / 100) ** 2);
        const latestGlucose = diabetesData.glucoseReadings.slice(-1)[0]?.value;

       const prompt = `
You are a highly specialized medical recommendation agent focused on gestational diabetes, especially for Indian patients.

Your task:
1️⃣ Carefully analyze the patient profile below (age, BMI, glucose, blood pressure, insulin, pregnancies, diabetes pedigree function).
2️⃣ Provide culturally relevant *diet* and *exercise* recommendations, using Indian foods and practices.
3️⃣ Clearly explain in the analysis why these recommendations were chosen, referencing specific patient metrics (e.g., high BMI, elevated glucose, insulin resistance).
4️⃣ Flag any *risks or concerns* you detect (e.g., if glucose is too high, insulin patterns concerning, blood pressure abnormal).
5️⃣ Be specific, actionable, and personalized.

✅ STRICT RULES:
- Output ONLY valid, raw JSON.
- DO NOT wrap the JSON in backticks or markdown.
- DO NOT include any explanation or extra text.
- DO NOT wrap the JSON inside another JSON field.
- The top-level output must exactly match the JSON structure below.

Expected JSON format:
{
  "diet": {
    "summary": "One short sentence summarizing the dietary approach.",
    "details": [
      "Point 1: Specific Indian dietary recommendation with reasoning linked to patient data.",
      "Point 2: Specific Indian dietary recommendation with reasoning linked to patient data.",
      "Point 3: Specific Indian dietary recommendation with reasoning linked to patient data."
    ]
  },
  "exercise": {
    "summary": "One short sentence summarizing the exercise approach.",
    "details": [
      "Point 1: Specific culturally relevant exercise recommendation with reasoning linked to patient data.",
      "Point 2: Specific culturally relevant exercise recommendation with reasoning linked to patient data.",
      "Point 3: Specific culturally relevant exercise recommendation with reasoning linked to patient data."
    ]
  },
  "analysis_summary": "3 detailed lines explaining the analysis of the patient metrics and why the specific recommendations were made."
}

Patient profile:
- Age: ${user.age}
- Gender: ${user.gender}
- BMI: ${bmi.toFixed(2)}
- Pregnancies: ${diabetesData.pregnancies}
- Latest glucose: ${latestGlucose} mg/dL
- Blood pressure: ${diabetesData.bloodPressure} mmHg
- Insulin: ${diabetesData.insulin}
- Diabetes pedigree function: ${diabetesData.diabetesPedigreeFunction}

Generate the detailed recommendations and analysis NOW.
`;


        const response = await fetch(
            `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
            {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [
                        {
                            parts: [{ text: prompt }]
                        }
                    ]
                })
            }
        );

        if (!response.ok) {
            const error = await response.json();
            console.error('Gemini API error:', error);
            return res.status(500).json({ error: 'Failed to get recommendation' });
        }

        const data = await response.json();
        const rawText = data.candidates?.[0]?.content?.parts?.[0]?.text;

        if (!rawText) {
            return res.status(500).json({ error: 'No recommendation generated by LLM' });
        }

        // Clean out any extra wrapping (markdown, accidental text)
        function extractJsonFromLLMResponse(raw) {
            const jsonMatch = raw.match(/({[\s\S]*})/);
            if (jsonMatch) {
                return jsonMatch[1];
            } else {
                throw new Error('No valid JSON found in the LLM response');
            }
        }

        let parsedRecommendations;
        try {
            const cleanJsonString = extractJsonFromLLMResponse(rawText);
            parsedRecommendations = JSON.parse(cleanJsonString);
        } catch (err) {
            console.error('Failed to parse LLM JSON:', err);
            return res.status(500).json({ error: 'Invalid JSON format from LLM' });
        }

        res.status(200).json({
            message: 'Recommendations generated successfully',
            recommendations: parsedRecommendations
        });

    } catch (error) {
        console.error('Error generating recommendations:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

export default router;